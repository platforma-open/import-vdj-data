// parse list of available columns from mixcr or immunoseq

self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
maps := import("@platforma-sdk/workflow-tengo:maps")
txt := import("@platforma-sdk/workflow-tengo:txt")

inferColumnsTpl := assets.importTemplate(":infer-columns-from-header")
columnInfoToLabelsTpl := assets.importTemplate(":column-info-to-labels")
splitHeaderTpl := assets.importTemplate(":split-header")

self.defineOutputs("columnsInfo", "columnDescriptions", "headerColumns")

self.body(func(inputs) {

    format := inputs.format
    dataset := inputs.dataset
    fileExtension := dataset.spec.domain["pl7.app/fileExtension"]

    inputFile := undefined

    // get first file from the dataset // @TODO take first non-empty file
    for _, v in dataset.data.inputs() {
        inputFile = v
        break
    }

    if inputFile == undefined {
        ll.panic("No inputs found in the dataset")
    }

    headerContent := txt.head(inputFile, {lines: 1})
    separator := "\t"
    if fileExtension == "tsv" {
        separator = "\t"
    } else if fileExtension == "csv" {
        separator = ","
    } else {
        ll.panic("Unsupported file extension: " + fileExtension)
    }
    header := render.create(splitHeaderTpl, {
        header: headerContent,
        separator: separator
    }).output("result")

    // If format not chosen yet, do not infer columns; let the UI show headers and wait
    if format == undefined {
        return {
            columnsInfo: header,
            columnDescriptions: [],
            headerColumns: header
        }
    }

    // if custom, treat undefined or empty/incomplete mapping as not ready
    if format == "custom" && (inputs.customMapping == undefined || 
        (is_undefined(inputs.customMapping["cdr3-nt"]) &&
            is_undefined(inputs.customMapping["cdr3-aa"])) ||
        (is_undefined(inputs.customMapping["v-gene"]) ||
            is_undefined(inputs.customMapping["j-gene"]) ||
            inputs.primaryCountType == undefined ||
            (is_undefined(inputs.customMapping["umi-count"]) &&
            is_undefined(inputs.customMapping["read-count"])))) {
        return {
            columnsInfo: header,
            columnDescriptions: [],
            headerColumns: header
        }
    }
    
    columnsInfo := render.create(inferColumnsTpl, {
                        format: format,
                        header: header,
                        customMapping: inputs.customMapping,
                        primaryCountType: inputs.primaryCountType
    }).output("columnsInfo")

    columnDescriptions := render.create(columnInfoToLabelsTpl, {
        columnsInfo: columnsInfo
    }).output("columnDescriptions")

    return {
        columnsInfo: columnsInfo,
        columnDescriptions: columnDescriptions,
        headerColumns: header
    }
})
