// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")

inferColumnsTpl := assets.importTemplate(":infer-columns")
processBulkTpl := assets.importTemplate(":process-bulk")

wf.setPreRun(assets.importTemplate(":prerun"))

wf.body(func(args) {
	
	format := args.format
	dataset := wf.resolve(args.datasetRef)
	chains := args.chains
	blockId := wf.blockId().getDataAsJson()

	// Do nothing until format is selected
	if format == undefined {
		return {
			outputs: {},
			exports: {}
		}
	}

	// For custom format, wait until mapping is complete before running main workflow
	if format == "custom" {
		m := args.customMapping
		if m == undefined || ((is_undefined(m["cdr3-nt"]) || m["cdr3-nt"] == "") && (is_undefined(m["cdr3-aa"]) || m["cdr3-aa"] == "")) || is_undefined(m["v-gene"]) || is_undefined(m["j-gene"]) || ((is_undefined(m["read-count"]) || m["read-count"] == "") && (is_undefined(m["umi-count"]) || m["umi-count"] == "")) {
			return {
				outputs: {},
				exports: {}
			}
		}
	}

	if chains == undefined {
		chains = ["IGHeavy", "IGLight", "TRA", "TRB", "TRD", "TRG"]
	}

	columnsInfo := render.create(inferColumnsTpl, {
		format: format,
		dataset: dataset,
		customMapping: args.customMapping
	}).output("columnsInfo")

	result := render.createEphemeral(processBulkTpl, {
		blockId: blockId,
		format: format,
		dataset: dataset,
		columnsInfo: columnsInfo,
		chains: chains
	})

	return {
		outputs: {
			result: result.output("result"),
			stats: result.output("stats")
		},

		exports: {
			result: result.output("result"),
			stats: result.output("stats")
		}
	}
})

