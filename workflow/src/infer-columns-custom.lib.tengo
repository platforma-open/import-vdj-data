maps := import("@platforma-sdk/workflow-tengo:maps")
slices := import("@platforma-sdk/workflow-tengo:slices")
sets := import("@platforma-sdk/workflow-tengo:sets")
json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")

// Helper to add common annotations for table view properties
a := func(order, defaultVisibility, spec) {
    return maps.merge(spec, {
        "pl7.app/table/orderPriority": string(order),
        "pl7.app/table/visibility": is_undefined(defaultVisibility) ? "hidden" : defaultVisibility ? "default" : "optional"
    })
}

// Define spec templates (subset aligned with immunoSeq lib)
readColumnSpecs := {
    "read-count": {
        id: "read-count",
        column: "read-count",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/readCount",
            valueType: "Long",
            annotations: a(89000, true, {
                "pl7.app/isAbundance": "true",
                "pl7.app/min": "0",
                "pl7.app/abundance/unit": "reads",
                "pl7.app/abundance/normalized": "false",
                "pl7.app/label": "Number Of Reads",
                "pl7.app/description": "The raw number of sequencing reads in the sample assigned to the clonotype.",
                "pl7.app/table/visibility": "default"
            })
        }
    },
    "read-fraction": {
        id: "read-fraction",
        column: "read-fraction",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/readFraction",
            valueType: "Double",
            annotations: a(88999, false, {
                "pl7.app/isAbundance": "true",
                "pl7.app/min": "0",
                "pl7.app/max": "1",
                "pl7.app/abundance/unit": "reads",
                "pl7.app/abundance/normalized": "true",
                "pl7.app/label": "Read Fraction",
                "pl7.app/description": "The fraction of total reads in the sample assigned to the clonotype.",
                "pl7.app/format": ".2p",
                "pl7.app/table/visibility": "default"
            })
        }
    }
}

umiColumnSpecs := {
    "umi-count": {
        id: "umi-count",
        column: "umi-count",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/uniqueMoleculeCount",
            valueType: "Long",
            annotations: a(90000, false, {
                "pl7.app/isAbundance": "true",
                "pl7.app/min": "0",
                "pl7.app/abundance/unit": "molecules",
                "pl7.app/abundance/normalized": "false",
                "pl7.app/label": "Number Of UMIs",
                "pl7.app/description": "The number of unique molecules (UMIs) in the sample assigned to the clonotype.",
                "pl7.app/table/visibility": "optional"
            })
        }
    },
    "umi-fraction": {
        id: "umi-fraction",
        column: "umi-fraction",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/uniqueMoleculeFraction",
            valueType: "Double",
            annotations: a(89999, false, {
                "pl7.app/isAbundance": "true",
                "pl7.app/min": "0",
                "pl7.app/max": "1",
                "pl7.app/abundance/unit": "molecules",
                "pl7.app/abundance/normalized": "true",
                "pl7.app/label": "UMI Fraction",
                "pl7.app/description": "The fraction of total UMIs in the sample assigned to the clonotype.",
                "pl7.app/format": ".2p",
                "pl7.app/table/visibility": "optional"
            })
        }
    }
}

// Property specs (subset)
propertyColumnSpecs := {
    "cdr3-nt": {
        id: "cdr3-nt",
        column: "cdr3-nt",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: { "pl7.app/alphabet": "nucleotide", "pl7.app/vdj/feature": "CDR3" },
            annotations: a(100000, true, { "pl7.app/label": "CDR3 nt", "pl7.app/description": "The nucleotide sequence of the CDR3 region.", "pl7.app/table/visibility": "optional", "pl7.app/vdj/isMainSequence": "true", "pl7.app/vdj/isAssemblingFeature": "true" })
        }
    },
    "cdr3-aa": {
        id: "cdr3-aa",
        column: "cdr3-aa",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: { "pl7.app/alphabet": "aminoacid", "pl7.app/vdj/feature": "CDR3" },
            annotations: a(99000, true, { "pl7.app/label": "CDR3 aa", "pl7.app/description": "The amino acid sequence of the CDR3 region.", "pl7.app/table/visibility": "default", "pl7.app/vdj/isMainSequence": "true", "pl7.app/vdj/isAssemblingFeature": "true" })
        }
    },
    "cdr3-aa-length": {
        id: "cdr3-aa-length",
        column: "cdr3-aa-length",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/alphabet": "aminoacid", "pl7.app/vdj/feature": "CDR3" },
            annotations: a(80000, true, { "pl7.app/label": "CDR3 Length, aa", "pl7.app/description": "The length of the CDR3 amino acid sequence.", "pl7.app/table/visibility": "optional" })
        }
    },
    "cdr3-nt-length": {
        id: "cdr3-nt-length",
        column: "cdr3-nt-length",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/alphabet": "nucleotide", "pl7.app/vdj/feature": "CDR3" },
            annotations: a(79999, false, { "pl7.app/label": "CDR3 Length, nt", "pl7.app/description": "The length of the CDR3 nucleotide sequence.", "pl7.app/table/visibility": "optional" })
        }
    },
    "is-productive": {
        id: "is-productive",
        column: "is-productive",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/sequence/productive",
            valueType: "String",
            annotations: a(79000, true, { "pl7.app/label": "Productive", "pl7.app/description": "A flag indicating whether the main sequence is productive (in-frame and without stop codons).", "pl7.app/table/visibility": "optional", "pl7.app/isDiscreteFilter": "true", "pl7.app/discreteValues": "[\"True\", \"False\"]" })
        }
    },
    "v-gene": {
        id: "v-gene",
        column: "v-gene",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "VGene" },
            annotations: a(69000, true, { "pl7.app/label": "V Gene", "pl7.app/description": "The name of the best-matching V gene.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    "v-allele": {
        id: "v-allele",
        column: "v-allele",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/geneHitWithAllele",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "VGene" },
            annotations: a(69000, true, { "pl7.app/label": "V Allele", "pl7.app/description": "The name of the best-matching V gene, including allele information.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    "d-gene": {
        id: "d-gene",
        column: "d-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "DGene" },
            annotations: a(59000, true, { "pl7.app/label": "D Gene", "pl7.app/description": "The name of the best-matching D gene.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    "d-allele": {
        id: "d-allele",
        column: "d-allele",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHitWithAllele",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "DGene" },
            annotations: a(59000, true, { "pl7.app/label": "D Allele", "pl7.app/description": "The name of the best-matching D gene, including allele information.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    "j-gene": {
        id: "j-gene",
        column: "j-gene",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "JGene" },
            annotations: a(49000, true, { "pl7.app/label": "J Gene", "pl7.app/description": "The name of the best-matching J gene.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    "j-allele": {
        id: "j-allele",
        column: "j-allele",
        allowNA: false,
        spec: {
            name: "pl7.app/vdj/geneHitWithAllele",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "JGene" },
            annotations: a(49000, true, { "pl7.app/label": "J Allele", "pl7.app/description": "The name of the best-matching J gene, including allele information.", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "default" })
        }
    },
    // Additional optional fields aligned with MiXCR exports
    "c-gene": {
        id: "c-gene",
        column: "c-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "CGene" },
            annotations: a(48000, false, { "pl7.app/label": "C Gene", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "optional" })
        }
    },
    "c-allele": {
        id: "c-allele",
        column: "c-allele",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHitWithAllele",
            valueType: "String",
            domain: { "pl7.app/vdj/reference": "CGene" },
            annotations: a(47900, false, { "pl7.app/label": "C Allele", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "optional" })
        }
    },
    "isotype": {
        id: "isotype",
        column: "isotype",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/isotype",
            valueType: "String",
            annotations: a(47000, true, { "pl7.app/label": "IG isotype", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "optional" })
        }
    },
    // "top-chains": {
    //     id: "top-chains",
    //     column: "top-chains",
    //     allowNA: true,
    //     spec: {
    //         name: "pl7.app/vdj/chain",
    //         valueType: "String",
    //         annotations: a(46900, false, { "pl7.app/label": "Chain", "pl7.app/isDiscreteFilter": "true", "pl7.app/table/visibility": "optional" })
    //     }
    // },
    // Junction lengths
    "n-length-vj-junction": {
        id: "n-length-vj-junction",
        column: "n-length-vj-junction",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/vdj/feature": "VJJunction", "pl7.app/alphabet": "nucleotide" },
            annotations: a(46000, false, { "pl7.app/label": "Length of VJ Junction nt", "pl7.app/table/visibility": "optional" })
        }
    },
    "n-length-vd-junction": {
        id: "n-length-vd-junction",
        column: "n-length-vd-junction",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/vdj/feature": "VDJunction", "pl7.app/alphabet": "nucleotide" },
            annotations: a(45900, false, { "pl7.app/label": "Length of VD Junction nt", "pl7.app/table/visibility": "optional" })
        }
    },
    "n-length-dj-junction": {
        id: "n-length-dj-junction",
        column: "n-length-dj-junction",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/vdj/feature": "DJJunction", "pl7.app/alphabet": "nucleotide" },
            annotations: a(45800, false, { "pl7.app/label": "Length of DJ Junction nt", "pl7.app/table/visibility": "optional" })
        }
    },
    "n-length-total-added": {
        id: "n-length-total-added",
        column: "n-length-total-added",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequenceLength",
            valueType: "Int",
            domain: { "pl7.app/alphabet": "nucleotide" },
            annotations: a(45700, false, { "pl7.app/label": "Total number of added nt", "pl7.app/table/visibility": "optional" })
        }
    },
    // Mutations (per V/J, aa/nt, count/rate)
    "aa-mutations-count-v": {
        id: "aa-mutations-count-v",
        column: "aa-mutations-count-v",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/aaMutationsCount",
            valueType: "Int",
            domain: { "pl7.app/vdj/gene": "V" },
            annotations: a(45000, false, { "pl7.app/label": "AA mutations count in V gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "aa-mutations-rate-v": {
        id: "aa-mutations-rate-v",
        column: "aa-mutations-rate-v",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/aaMutationsRate",
            valueType: "Double",
            domain: { "pl7.app/vdj/gene": "V" },
            annotations: a(44900, false, { "pl7.app/label": "AA mutations rate in V gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "nt-mutations-count-v": {
        id: "nt-mutations-count-v",
        column: "nt-mutations-count-v",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/nMutationsCount",
            valueType: "Int",
            domain: { "pl7.app/vdj/gene": "V" },
            annotations: a(44800, false, { "pl7.app/label": "NT mutations count in V gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "nt-mutations-rate-v": {
        id: "nt-mutations-rate-v",
        column: "nt-mutations-rate-v",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/nMutationsRate",
            valueType: "Double",
            domain: { "pl7.app/vdj/gene": "V" },
            annotations: a(44700, false, { "pl7.app/label": "NT mutations rate in V gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "aa-mutations-count-j": {
        id: "aa-mutations-count-j",
        column: "aa-mutations-count-j",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/aaMutationsCount",
            valueType: "Int",
            domain: { "pl7.app/vdj/gene": "J" },
            annotations: a(44600, false, { "pl7.app/label": "AA mutations count in J gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "aa-mutations-rate-j": {
        id: "aa-mutations-rate-j",
        column: "aa-mutations-rate-j",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/aaMutationsRate",
            valueType: "Double",
            domain: { "pl7.app/vdj/gene": "J" },
            annotations: a(44500, false, { "pl7.app/label": "AA mutations rate in J gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "nt-mutations-count-j": {
        id: "nt-mutations-count-j",
        column: "nt-mutations-count-j",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/nMutationsCount",
            valueType: "Int",
            domain: { "pl7.app/vdj/gene": "J" },
            annotations: a(44400, false, { "pl7.app/label": "NT mutations count in J gene", "pl7.app/table/visibility": "optional" })
        }
    },
    "nt-mutations-rate-j": {
        id: "nt-mutations-rate-j",
        column: "nt-mutations-rate-j",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/sequence/nMutationsRate",
            valueType: "Double",
            domain: { "pl7.app/vdj/gene": "J" },
            annotations: a(44300, false, { "pl7.app/label": "NT mutations rate in J gene", "pl7.app/table/visibility": "optional" })
        }
    }
}

// Required columns cannot be used here because input columns are selected one by one triggering prerun
// requiredColumns := ["cdr3-aa", "v-gene", "j-gene"]

getColumns := func(header, customMapping, primaryCountType) {

    // Column mapping canonical -> source
    columnMapping := {}
    for key, src in customMapping {
        if is_undefined(src) || src == "" { continue }
        columnMapping[key] = src
        
    }

    // Check for required columns
    // for col in requiredColumns {
	// 	if is_undefined(columnMapping[col]) {
	// 		ll.panic("Missing required column in input file: %v", col)
	// 	}
	// }
	// if is_undefined(columnMapping["read-count"]) && is_undefined(columnMapping["umi-count"]) {
	// 	ll.panic("Input file must contain at least one abundance column: read-count or umi-count")
	// }

    // Build arrays based on provided mapping
    hasUMIs := !is_undefined(customMapping["umi-count"]) && customMapping["umi-count"] != ""
    hasReads := !is_undefined(customMapping["read-count"]) && customMapping["read-count"] != ""

    if hasUMIs {
		for _, col in readColumnSpecs {
			col.spec.annotations["pl7.app/table/visibility"] = "optional"
		}
	}

    abundanceColumns := {}
    if hasReads {
        abundanceColumns = maps.merge(abundanceColumns, readColumnSpecs)
    }
    if hasUMIs {
        abundanceColumns = maps.merge(abundanceColumns, umiColumnSpecs)
    }

    // Determine primary abundance and anchor using user selection if provided
    mainAbundance := hasUMIs ? "umi-count" : "read-count"
    mainFractionAbundance := hasUMIs ? "umi-fraction" : "read-fraction"
    if primaryCountType != undefined {
        mainAbundance = primaryCountType == "umi" ? "umi-count" : "read-count"
    }

    if abundanceColumns[mainAbundance] != undefined {
        abundanceColumns[mainAbundance].spec.annotations["pl7.app/abundance/isPrimary"] = "true"
        abundanceColumns[mainAbundance].spec.annotations["pl7.app/isAnchor"] = "true"
        abundanceColumns[mainFractionAbundance].spec.annotations["pl7.app/abundance/isPrimary"] = "true"
    }

    // @TODO: make this configurable for cases with full sequence
	propertyColumnSpecs["cdr3-nt"].spec.annotations["pl7.app/vdj/isMainSequence"] = "true"
	propertyColumnSpecs["cdr3-aa"].spec.annotations["pl7.app/vdj/isMainSequence"] = "true"

    // Property columns from mapping
    propertyColumns := []
    for key, src in columnMapping {
        spec := propertyColumnSpecs[key]
        if !is_undefined(spec) {
            propertyColumns = append(propertyColumns, spec)
        }
    }    

    // Key structure
    keyColumns := []
    keyStructure := ""
    if !is_undefined(customMapping["cdr3-nt"]) && customMapping["cdr3-nt"] != "" {
        keyColumns = ["cdr3-nt", "v-gene", "j-gene"]
        keyStructure = "CDR3-nt-VGene-JGene"
    } else if !is_undefined(customMapping["cdr3-aa"]) && customMapping["cdr3-aa"] != "" {
        keyColumns = ["cdr3-aa", "v-gene", "j-gene"]
        keyStructure = "CDR3-aa-VGene-JGene"
    } 

    return {
        hasUMIs: hasUMIs,
        abundanceColumns: maps.getValues(abundanceColumns),
        propertyColumns: propertyColumns,
        columnMapping: columnMapping,
        clonotypeKeyStructure: keyStructure,
        clonotypeKeyColumns: keyColumns
    }
}

export {
	getColumns: getColumns
}
